//
// Generated file, do not edit! Created by nedtool 5.2 from MyPacket.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __MYPACKET_M_H
#define __MYPACKET_M_H

#include <omnetpp.h>

// nedtool version check
// #define MSGC_VERSION 0x0502
// #if (MSGC_VERSION!=OMNETPP_VERSION)
// #    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
// #endif



/**
 * Class generated from <tt>MyPacket.msg:15</tt> by nedtool.
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * //
 * packet MyPacket
 * {
 *     int source;
 *     int destination;
 *     simtime_t arrivalAtBuffer;
 *     int Index;
 *     int flag;
 *     int dst_table[100];
 *     int dst_intra;
 *     int dst_inter;
 *     double End2EndStartTime;
 *     int channel;
 *     int pri_latency;
 *     int pri_realiablity;
 *     int application_index;
 * }
 * </pre>
 */
class MyPacket : public ::omnetpp::cPacket
{
  protected:
    int source;
    int destination;
    ::omnetpp::simtime_t arrivalAtBuffer;
    int Index;
    int flag;
    int dst_table[100];
    int dst_intra;
    int dst_inter;
    double End2EndStartTime;
    int channel;
    int pri_latency;
    int pri_realiablity;
    int application_index;

  private:
    void copy(const MyPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MyPacket&);

  public:
    MyPacket(const char *name=nullptr, short kind=0);
    MyPacket(const MyPacket& other);
    virtual ~MyPacket();
    MyPacket& operator=(const MyPacket& other);
    virtual MyPacket *dup() const override {return new MyPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSource() const;
    virtual void setSource(int source);
    virtual int getDestination() const;
    virtual void setDestination(int destination);
    virtual ::omnetpp::simtime_t getArrivalAtBuffer() const;
    virtual void setArrivalAtBuffer(::omnetpp::simtime_t arrivalAtBuffer);
    virtual int getIndex() const;
    virtual void setIndex(int Index);
    virtual int getFlag() const;
    virtual void setFlag(int flag);
    virtual unsigned int getDst_tableArraySize() const;
    virtual int getDst_table(unsigned int k) const;
    virtual void setDst_table(unsigned int k, int dst_table);
    virtual int getDst_intra() const;
    virtual void setDst_intra(int dst_intra);
    virtual int getDst_inter() const;
    virtual void setDst_inter(int dst_inter);
    virtual double getEnd2EndStartTime() const;
    virtual void setEnd2EndStartTime(double End2EndStartTime);
    virtual int getChannel() const;
    virtual void setChannel(int channel);
    virtual int getPri_latency() const;
    virtual void setPri_latency(int pri_latency);
    virtual int getPri_realiablity() const;
    virtual void setPri_realiablity(int pri_realiablity);
    virtual int getApplication_index() const;
    virtual void setApplication_index(int application_index);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MyPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MyPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MYPACKET_M_H

